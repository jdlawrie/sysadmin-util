#!/usr/bin/perl -w

=head1 NAME

multi-ping - Multi-protocol ping wrapper

=head1 SYNOPSIS

  multi-ping [--forever] hostname1 hostname2 .. hostnameN

=cut

=head1 DESCRIPTION

This wrapper script will invoke one of 'ping' or 'ping6', as appropriate,
to test the connectivity of a remote host and your route to it. Each host
is only pinged once per A/AAAA record unless --forever is passed first.

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut

=head1 LICENSE

Copyright (c) 2013-2014 by Steve Kemp.  All rights reserved.

This script is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

The LICENSE file contains the full text of the license.

=cut


use strict;
use warnings;



#
#  Check the dependencies.
#
checkSystem();

#
#  We could parse arguments here, for the moment we will hard-wire
# a timeout of five seconds.
#
my $timeout = 5;


#
# Process each hostname specified upon the command-line.
#
my $count = 0;
my $forever = 0;
while ( my $host = shift )
{
    if ((!$count) && ($host =~ /^--f(?:orever)?$/))  # check if the first argument is -f/--forever - backward compatible ;)
    {
        $forever = 1;
    }
    else
    {
        pingHost($host);
        $count += 1;
    }
}

#
# If we didn't get any arguments then we should complain.
#
if ( $count eq 0 )
{
    print "Usage: multi-ping [--forever/-f] hostname1 [hostname2 .. hostnameN]\n";
    exit(1);
}




=begin doc

Given a hostname lookup both the AAAA & A records.  For each result
perform the appropriate ping request.

=end doc

=cut

sub pingHost
{
    my ($hostname) = (@_);

    #
    #  If we've been given an URI then we'll remove the leading-scheme
    # and use the hostname only.
    #
    if ( $hostname =~ m!^([a-z]+:\/\/)([^/]+)/?!i )
    {
        $hostname = $2;

        #
        #  Port might be specified too, drop that if present.
        #
        if ( $hostname =~ /^(.*):([0-9]+)$/ )
        {
            $hostname = $1;
        }
    }

    #
    #  Lookup the IP for the name specified
    #
    my $res = Net::DNS::Resolver->new;
    my $query = $res->query( $hostname, "ANY" );

    if ($query)
    {
	while (1) { # Infinite loop, will be broken out of if --forever isn't set.
            foreach my $rr ( $query->answer )
            {
                my $ping_binary = $rr->type eq "A" ? "ping" : $rr->type eq "AAAA" ? "ping6" : "";
                if ($ping_binary) {
                    if (
                        system(
                            "$ping_binary -c1 -w$timeout -W$timeout $hostname >/dev/null 2>/dev/null"
                        ) == 0
                       )
                    {
                        print "Host $hostname - " . $rr->address() . " alive\n";
                    }
                    else
                    {
                        print "Host $hostname - " . $rr->address() . " FAILED\n";
                    }
                }
            }
            last if !$forever;
            sleep 1;
        }
    }
    else
    {
        print "WARNING: Failed to resolve $hostname\n";
    }
}



=begin doc

Test that we have the required perl dependencies present.

=end doc

=cut

sub checkSystem
{
    my $eval = "use Net::DNS;";

    ## no critic (Eval)
    eval($eval);
    ## use critic

    #
    #  If we don't have Net::DNS we're out of luck.
    #
    if ($@)
    {
        print "The required Net::DNS module is missing.  Aborting.\n";
        exit(1);
    }

}
